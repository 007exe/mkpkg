Замечания от GhosT RecoN
===========================================
крч, у xml.dom.minidom особо нет екзепшинов, он может юзать ток стандартные - TypeError и AttributeError, 
но нам это не подходит. Зато так же еще есть - xml.parsers.expat.ExpatError, вот если его поставить вначале, 
там где dom =, то при плохом xml он выведет в чем дело, где и что. Если же xml не битый, то try/except дальше можно 
прописать с Exception as e, но смысла в этом нет, т.к. он не ловит отсутствие полей или их несоответствие, т.е. если не нашло, 
то выводит пустоту. Прост тебе важно, чтобы все поля, что прописаны в mkpkg_xml_parser.py, точно были в data.xml и их вывело, 
или же, если не нашло, то пусть выводит пустоту, как сейчас. Если же первый вариант, то надо переписать эти Exception as e, чтобы 
ловили отсутствие полей (те, что в if или for).
===========================================
Т.к. раньше я не видел xml.dom.minidom, то еще читанул по его поводу на сайте Python, там пишет, что он устарел и в нем есть уязвимости какие-то
Прост когда парсил xml, то использовал

==========================================
****************************************************************
import xml.etree.ElementTree as ET

data = '''<person>
  <name>Chuck</name>
  <phone type="intl">
    +1 734 303 4456
  </phone>
  <email hide="yes" />
</person>'''

tree = ET.fromstring(data)
print('Name:', tree.find('name').text)
print('Attr:', tree.find('email').get('hide'))
print('----------')

input = '''<stuff>
  <users>
    <user x="2">
      <id>001</id>
      <name>Chuck</name>
    </user>
    <user x="7">
      <id>009</id>
      <name>Brent</name>
    </user>
  </users>
</stuff>'''

stuff = ET.fromstring(input)
lst = stuff.findall('users/user')
print('User count:', len(lst))

for item in lst:
    print('Name', item.find('name').text)
    print('Id', item.find('id').text)
    print('Attribute', item.get('x'))
****************************************************************
==========================================

вопрос в этом
Прост тебе важно, чтобы все поля, что прописаны в mkpkg_xml_parser.py, точно были в data.xml и их вывело, или же, если не нашло, то пусть выводит 
пустоту, как сейчас ?

Если же первый вариант (все поля важны), то надо переписать эти Exception as e в каждой функции, чтобы ловили отсутствие полей (те, что в if или for).
прост если поля не нашло, оно крч ничего не выводит и работает без ошибки в итоге
но если поля в xml типа 100% должны быть(изменено)
а иначе файл считается типа битым
то тогда надо ловить отсутствие полей

крч, зависит от твоей задачи/цели
=====================================
Если надо отлавливать все поля
тогда вот так оно будет выглядеть
красной стрелкой я создал ошибку специально

скрин 1) Внесённая ошибка
скрин 2) Пример вывода ошибки
скрин 3) Предложенные правки

т.е. вот как я дописал проверки
тип если if сработал, то все ок, а если не нашел поле, то выводим свой екзепшин(изменено)
тоже самое и с for, если не нашло (not - т.е. там пусто) поле, то for не по чему идти и тоже вывод своей ошибки
так можно по всему коду прописать по сути

===========================================
****************************************************************
def get_maintainer():
    # global doc
    try:
        if not doc.getElementsByTagName("maintainer"):
            raise Exception("Can't find maintainer")
        for node in doc.getElementsByTagName("maintainer"):
            for mtag in node.childNodes:
                for me in mtag.childNodes:
                    if me.parentNode.nodeName == "name":
                        print("Name: "+me.nodeValue.strip())
                    else:
                        raise Exception("Can't find name")
                    if me.parentNode.nodeName == "email1":
                        print("Email: "+me.nodeValue.strip())
                    else:
                        raise Exception("Can't find email")
    except Exception as e:
        print("Oh shi~...", e)
        sys.exit(2)
****************************************************************
прост конструкция Exception as e перехватывает все ошибки (хотя в случае этих функций там нет исключений), но с raise("Бла бла бла"), мы можем выводить свои ошибки(изменено)
[22:16]
и даже если будет какой-то трабл без участия raise
то Exception as e все равно словит ошибку и выведет через e

